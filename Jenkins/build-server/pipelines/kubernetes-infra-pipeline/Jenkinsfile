def modifiedApps = []

pipeline {
    agent none

    environment {
        APPS_PATH = "Kubernetes/apps/"
        APPS = "frontend-app,traffic-app"
    }

    options{
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }    

    stages {
        
        stage('run pre-build checks'){
            agent{
                label 'master'
            }
            when{
                not {
                    changeset "Kubernetes/apps/*"
                }
            }
            steps{
                script{
                    currentBuild.result = 'ABORTED'
                    error("no changes to deployments, exiting early")
                }
            }
        }

        stage('determine modified deployments'){
            agent{
                label 'master'
            }
            steps{
                script{
                    modifiedApps = getModifiedApps(APPS)
                    modifiedApps.each{ print it }
                }
            }
        }

        stage('update modified deployments') {
            agent {
                label "kubernetes-agent"
            }
            environment{
                KUBECONFIG = credentials('remote-kubeconfig')
            }
            steps{
                script{
                    apply(modifiedApps, this.&updateDeployment())
                }
            }
        }
        
    }
        
}

////////////////////////////////////////////////////////////////////////////////////
// Groovy Scripts
////////////////////////////////////////////////////////////////////////////////////

def getModifiedApps(applications){
    modified = [] 
    def apps = applications.split(",")
    for(app in apps){
        if(checkFolderForDiffs(APPS_PATH + app + "/"))
            modified.add(app)
    }
    return modified
}

def apply (collection, func){
    for (item in collection){
        func(item)
    }
}

def updateDeployment(deployment){
    print "applying folder: " + deployment
    sh "kubectl --kubeconfig ${KUBECONFIG} apply -f ${deployment}"
}

def checkFolderForDiffs(path) {
    try {
        // git diff will return 1 for changes (failure) which is caught in catch, or
        // 0 meaning no changes 
        sh "git diff --quiet --exit-code HEAD~1..HEAD ${path}"
        return false
    } catch (err) {
        return true
    }
}