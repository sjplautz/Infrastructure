def modifiedImages = []

pipeline {
    agent none

    environment {
        APPS = "frontend-app,traffic-app"
        DIR = ""
    }

    options{
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'images', value: '$.push_data.images[*]']
            ],

            token: 'kubernetes_update',
            causeString: 'Triggered on $images',

            printContributedVariables: true,
            printPostContent: true,

            silentResponse: false
        )
  }    

    stages {

        stage('determine modified apps'){
            agent{
                label 'master'
            }
            steps{
                sh "ls -la"
                script{
                    def hashes = readFile('test.txt')
                    print hashes
                    
                    println(images)
                    modifiedImages = getModifiedImages(APPS)
                    println("modified images:")
                    modifiedImages.each{ print it }
                }
            }
        }

        stage('build and push docker images') {
            agent {
                label "kubernetes-agent"
            }
            environment{
                KUBECONFIG = credentials('remote-kubeconfig')
            }
            options{
                skipDefaultCheckout()
            }
            steps{
                apply(modifiedImages, this.&updateDeployment)
            }
        }
        
    }

    post {
        always{
            echo "all done"
        }
    }
    
}

////////////////////////////////////////////////////////////////////////////////////
// Groovy Scripts
////////////////////////////////////////////////////////////////////////////////////

def getModifiedImages(applications){
    modified = [] 
    def apps = applications.split(",")
    for(app in apps){
        if(checkDiffs(app + "/"))
            modified.add(app)
    }
    return modified
}

def apply (collection, func){
    for (item in collection){
        func(item)
    }
}

def checkDiffs(appPath){
    return true
}

def updateDeployment(image){
    println("updating deployment for image: ${image}")
    sh "kubectl --kubeconfig ${KUBECONFIG} get deployments.apps"
}