pipeline {
    agent {
        label 'master'
    }

    environment {
        FILESHARE_PATH = "/home/fileshare"
        JENKINS_SERVER = "stephen@192.168.0.187"
        UBUNTU_LAPTOP = "stephen@192.168.0.211"
        UBUNTU_DESKTOP = "stephen@192.168.0.106"
        ssh-creds = credentials("ssh-master")
    }

    options{
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }    

    stages {
        
        stage('backup jenkins server volumes')
            environment{
                HOST = JENKINS_SERVER
                BS_PATH = "/build-server/volume-backups" 
                TS_PATH = "/task-server/volume-backups"
            }
            steps{
                sh "rsync -azP ${HOST}:${BS_PATH} fileshare-path"
                sh "rsync -azP ${HOST}:${TS_PATH} fileshare-path"
            }
        }

        stage('backup device root images'){
            environment{

            }
            steps{
                sh "rsync -azP ${UBUNTU_LAPTOP}:${BS_PATH} fileshare-path"
                sh "rsync -azP ${UBUNTU_DESKTOP}:${TS_PATH} fileshare-path"
            }

        }

        stage('backup device home images') {
            environment{
                KUBECONFIG = credentials('remote-kubeconfig')
            }
            steps{
                sh "rsync -azP ${UBUNTU_LAPTOP}:${BS_PATH} fileshare-path"
                sh "rsync -azP ${UBUNTU_DESKTOP}:${TS_PATH} fileshare-path"
            }

        }
        
    }
        
}

////////////////////////////////////////////////////////////////////////////////////
// Groovy Scripts
////////////////////////////////////////////////////////////////////////////////////

def getModifiedApps(applications){
    modified = [] 
    def apps = applications.split(",")
    for(app in apps){
        if(checkFolderForDiffs(APPS_PATH + app + "/"))
            modified.add(app)
    }
    return modified
}

def apply (collection, func){
    for (item in collection){
        func(item)
    }
}

def updateDeployment(deployment){
    folder = APPS_PATH + deployment + "/"
    print "deleting old resources from folder: " + folder
    sh "kubectl --kubeconfig ${KUBECONFIG} delete -f ${folder}"
    print "applying folder: " + folder
    sh "kubectl --kubeconfig ${KUBECONFIG} apply -f ${folder}"
}

def checkFolderForDiffs(path) {
    try {
        // git diff will return 1 for changes (failure) which is caught in catch, or
        // 0 meaning no changes 
        sh "git diff --quiet --exit-code HEAD~1..HEAD ${path}"
        return false
    } catch (err) {
        return true
    }
}
